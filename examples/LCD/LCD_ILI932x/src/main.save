
#include "RCC_Helper.h"
#include "GPIO_Helper.h"
#include "gpio_cpp.h"
#include <stdio.h>
#include "ST7781/Adafruit_TFTLCD.h"
#include "ST7781/SWTFT.h"

#define BLACK   0x0000
#define BLUE    0x001F
#define RED     0xF800
#define GREEN   0x07E0
#define CYAN    0x07FF
#define MAGENTA 0xF81F
#define YELLOW  0xFFE0
#define WHITE   0xFFFF

GPIO_PIN* g_cs, *g_rs, *g_wr, *g_rd, *g_rst;



void lcdSetWriteDir()
{
    static GPIO_PORT* _dataPort = GPIOA::GetInstance();
    *_dataPort->GetGPIO_CR() &= ~(0xffffffff);
    *_dataPort->GetGPIO_CR() |= 0x33333333;

    //    GPIOA::GetInstance()->SetupGPIO_OutPP(GPIO_PIN0);
//    GPIOA::GetInstance()->SetupGPIO_OutPP(GPIO_PIN1);
//    GPIOA::GetInstance()->SetupGPIO_OutPP(GPIO_PIN2);
//    GPIOA::GetInstance()->SetupGPIO_OutPP(GPIO_PIN3);
//    GPIOA::GetInstance()->SetupGPIO_OutPP(GPIO_PIN4);
//    GPIOA::GetInstance()->SetupGPIO_OutPP(GPIO_PIN5);
//    GPIOA::GetInstance()->SetupGPIO_OutPP(GPIO_PIN6);
//    GPIOA::GetInstance()->SetupGPIO_OutPP(GPIO_PIN7);
}


void lcdSetReadDir()
{
    static GPIO_PORT* _dataPort = GPIOA::GetInstance();
//    GPIOA::GetInstance()->SetupGPIO_InFloat(GPIO_PIN0);
//    GPIOA::GetInstance()->SetupGPIO_InFloat(GPIO_PIN1);
//    GPIOA::GetInstance()->SetupGPIO_InFloat(GPIO_PIN2);
//    GPIOA::GetInstance()->SetupGPIO_InFloat(GPIO_PIN3);
//    GPIOA::GetInstance()->SetupGPIO_InFloat(GPIO_PIN4);
//    GPIOA::GetInstance()->SetupGPIO_InFloat(GPIO_PIN5);
//    GPIOA::GetInstance()->SetupGPIO_InFloat(GPIO_PIN6);
//    GPIOA::GetInstance()->SetupGPIO_InFloat(GPIO_PIN7);
    *_dataPort->GetGPIO_CR() &= ~(0xffffffff);
    *_dataPort->GetGPIO_CR() |= 0x44444444;

    //    *_dataPort->GetGPIO_CR() |= 0x88888888;
//    uint16_t out = _dataPort->GetOutput();
//    out &= ~0xff;
//   _dataPort->SetOutput(out);
}

uint8_t lcdRead8()
{
    return GPIOA::GetInstance()->GetInput() & 0xff;
}

void lcdWrite8(uint8_t data)
{
    GPIOA::GetInstance()->SetOutput(data);
}

void lcdWriteData(uint16_t data)
{

  lcdSetWriteDir();
  g_cs->Reset();
  g_rs->Set();
  g_rd->Set();
  g_wr->Set();

  lcdWrite8(data >> 8);

  g_wr->Reset();
  RCC_Delay_us(10);
  g_wr->Set();

  lcdWrite8(data);

  g_wr->Reset();
  RCC_Delay_us(10);
  g_wr->Set();

  g_cs->Set();
}


void lcdWriteCommand(uint16_t command)
{
  lcdSetWriteDir();
  g_cs->Reset();
  g_rs->Reset();
  g_rd->Set();
  g_wr->Set();
  lcdWrite8(command >> 8);
  g_wr->Reset();
  RCC_Delay_us(10);
  g_wr->Set();
  lcdWrite8(command);
  g_wr->Reset();
  RCC_Delay_us(10);
  g_wr->Set();
  g_cs->Set();
}

int lcdReadData()
{
  uint16_t result;
  lcdSetReadDir();
  g_cs->Reset();
  g_rs->Set();
  g_rd->Set();
  g_wr->Set();

  g_rd->Reset();
  RCC_Delay_us(10);
  result = lcdRead8() << 8;
  g_rd->Set();

  RCC_Delay_us(10);

  g_rd->Reset();
  RCC_Delay_us(10);
  result |= lcdRead8();

  g_rd->Set();
  g_cs->Set();

  return result;
}


void lcdWriteRegister(uint16_t addr, uint16_t data) {
  lcdWriteCommand(addr);
  lcdWriteData(data);
}

uint16_t lcdReadRegister(uint16_t reg) {
  lcdWriteCommand(reg);
  return lcdReadData();
}


uint16_t lcdReadID() {
  return lcdReadRegister(0x00);
}


void lcdReset() {
  g_rst->Reset();
  RCC_Delay_ms(2);
  g_rst->Set();
  lcdWriteData(0);
  lcdWriteData(0);
  lcdWriteData(0);
  lcdWriteData(0);
}

void lcdFillScreen(uint16_t color) {

  lcdWriteRegister(0x0020, 0);
  lcdWriteRegister(0x0021, 0);
  lcdWriteCommand(0x0022);

  g_cs->Reset();
  g_rs->Set();
  g_rd->Set();
  g_wr->Set();

  lcdSetWriteDir();

  uint32_t i = 320;
  i *=240;

  while( i-- ) {
    lcdWrite8(color >> 8);
    g_wr->Reset();
    RCC_Delay_us(10);
    g_wr->Set();
    lcdWrite8(color);
    g_wr->Reset();
    RCC_Delay_us(10);
    g_wr->Set();
  }

  g_cs->Set();

}


/////////////////////////////////////////

void test()
{
    GPIOA* portA = GPIOA::GetInstance();
    GPIOB* portB = GPIOB::GetInstance();
    portA->EnablePeripheralClock(true);
    portB->EnablePeripheralClock(true);

    GPIO_PIN* cs = portB->GetPin(GPIO_PIN0);
    cs->SetupGPIO_OutPP();
    cs->SetSpeedHigh();

    GPIO_PIN* cd = portB->GetPin(GPIO_PIN1);
    cd->SetupGPIO_OutPP();
    cd->SetSpeedHigh();

    GPIO_PIN* rd = portB->GetPin(GPIO_PIN2);
    rd->SetupGPIO_OutPP();
    rd->SetSpeedHigh();

    GPIO_PIN* wr = portB->GetPin(GPIO_PIN10);
    wr->SetupGPIO_OutPP();
    wr->SetSpeedHigh();

    GPIO_PIN* rst = portB->GetPin(GPIO_PIN11);
    rst->SetupGPIO_OutPP();
    rst->SetSpeedHigh();

    g_cs = cs;
    g_rs = cd;
    g_rd = rd;
    g_wr= wr;
    g_rst = rst;

    lcdReset();
    uint16_t id2 = lcdReadID();
    lcdFillScreen(0xFFFF);



    SWTFT display(cs, cd, rd, wr, rst, portA);

    display.reset();
    volatile uint16_t id = display.readID();
    display.begin(id);
    display.drawRect(50, 50, 100, 100, RED);

    while(1)
        ;

}


int main()
{
    RCC_EnableHSI_64Mhz_AHB_64Mhz_APB1_32MHz_APB2_64MHz();
    test();

}
